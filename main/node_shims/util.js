import browser from "./helpers/util.js"
import { Buffer } from "./buffer.js"

let exported = {
    _extend: globalThis._extend,
    callbackify: globalThis.callbackify,
    debug: globalThis.debug,
    debuglog: globalThis.debuglog,
    deprecate: globalThis.deprecate,
    format: globalThis.format,
    formatWithOptions: globalThis.formatWithOptions,
    getSystemErrorName: globalThis.getSystemErrorName,
    inspect: globalThis.inspect,
    isArray: globalThis.isArray,
    isBoolean: globalThis.isBoolean,
    isBuffer: globalThis.isBuffer,
    isDate: globalThis.isDate,
    isDeepStrictEqual: globalThis.isDeepStrictEqual,
    isError: globalThis.isError,
    isFunction: globalThis.isFunction,
    isNull: globalThis.isNull,
    isNullOrUndefined: globalThis.isNullOrUndefined,
    isNumber: globalThis.isNumber,
    isObject: globalThis.isObject,
    isPrimitive: globalThis.isPrimitive,
    isRegExp: globalThis.isRegExp,
    isString: globalThis.isString,
    isSymbol: globalThis.isSymbol,
    isUndefined: globalThis.isUndefined,
    log: globalThis.log,
    parseArgs: globalThis.parseArgs,
    promisify: globalThis.promisify,
    stripVTControlCharacters: globalThis.stripVTControlCharacters,
    TextDecoder: globalThis.TextDecoder,
    TextEncoder: globalThis.TextEncoder,
    toUSVString: globalThis.toUSVString,
    ...browser,
    types: {},
    isBuffer: arg=arg instanceof Buffer,
}
let exportedDefault = exported
if (globalThis.Deno || globalThis.process) {
     exported = await import("node:util")
     exportedDefault = exported.default
}

var {
    _extend,
    callbackify,
    debug,
    debuglog,
    deprecate,
    format,
    formatWithOptions,
    getSystemErrorName,
    inherits,
    inspect,
    isArray,
    isBoolean,
    isBuffer,
    isDate,
    isDeepStrictEqual,
    isError,
    isFunction,
    isNull,
    isNullOrUndefined,
    isNumber,
    isObject,
    isPrimitive,
    isRegExp,
    isString,
    isSymbol,
    isUndefined,
    log,
    parseArgs,
    promisify,
    stripVTControlCharacters,
    TextDecoder,
    TextEncoder,
    toUSVString,
    types,
} = exported

export {
    _extend,
    callbackify,
    debug,
    debuglog,
    deprecate,
    format,
    formatWithOptions,
    getSystemErrorName,
    inherits,
    inspect,
    isArray,
    isBoolean,
    isBuffer,
    isDate,
    isDeepStrictEqual,
    isError,
    isFunction,
    isNull,
    isNullOrUndefined,
    isNumber,
    isObject,
    isPrimitive,
    isRegExp,
    isString,
    isSymbol,
    isUndefined,
    log,
    parseArgs,
    promisify,
    stripVTControlCharacters,
    TextDecoder,
    TextEncoder,
    toUSVString,
    types,
}

export default exportedDefault