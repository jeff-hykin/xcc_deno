s is: fib2

s is: fib

got here 2

### Exports

fib2

fib

_start



### Globals(import)

 0: __stack_pointer (3)

### Globals(data)

### Globals(bss)

### Functions

 0: fib2

 1: fib

 2: __main_argc_argv



### Memory  0x1

---- BSS  0x1

got to almost-end of do_compile

got to do_link

got here

### Functions

 0: wasi_snapshot_preview1.fd_prestat_get (import)

 1: wasi_snapshot_preview1.proc_exit (import)

 2: wasi_snapshot_preview1.args_sizes_get (import)

 3: wasi_snapshot_preview1.args_get (import)

 4: __wasm_call_ctors

 5: find_preopens

 6: _start

 7: fib2

 8: fib

 9: __main_argc_argv

10: exit

### Globals

 0: __stack_pointer

### Data

 0: .L0002

 1: __max_preopen_fd

 2: __on_exit_chain

should_link is: 1

should_emit_wasm is: 1

compiledWasm is: (module
;; WASM version: 1

;;=== 0x8: TYPE, len=23
(type (func))  ;; 0
(type (func (param i32) (result i32)))  ;; 1
(type (func (param i32 i32) (result i32)))  ;; 2
(type (func (result i32)))  ;; 3
(type (func (param i32)))  ;; 4

;;=== 0x21: IMPORT, len=150
(import "wasi_snapshot_preview1" "fd_prestat_get" (func $fd_prestat_get (type 2)))  ;; 0
(import "wasi_snapshot_preview1" "proc_exit" (func $proc_exit (type 4)))  ;; 1
(import "wasi_snapshot_preview1" "args_sizes_get" (func $args_sizes_get (type 2)))  ;; 2
(import "wasi_snapshot_preview1" "args_get" (func $args_get (type 2)))  ;; 3

;;=== 0xba: FUNC, len=8
;; func: #7
;;   func 4: type=#0
;;   func 5: type=#3
;;   func 6: type=#0
;;   func 7: type=#1
;;   func 8: type=#1
;;   func 9: type=#2
;;   func 10: type=#4

;;=== 0xc4: TABLE, len=4
(table 2 funcref)  ;; 0

;;=== 0xca: MEMORY, len=3
(memory 1)

;;=== 0xcf: GLOBAL, len=8
(global (;0;) (mut i32) (i32.const 8192))

;;=== 0xd9: EXPORT, len=32
(export "fib2" (func 7))
(export "fib" (func 8))
(export "_start" (func 6))
(export "memory" (memory 0))

;;=== 0xfb: ELEM, len=7
(elem (i32.const 1) func 10)  ;; 0

;;=== 0x104: CODE, len=521
(func (;4;) (type 0)
)
(func (;5;) (type 3)
  (local i32 i32 i32)
  global.get 0
  local.set 0
  local.get 0
  i32.const 8
  i32.sub
  global.set 0
  block (result i32)
    i32.const 3
    local.set 1
    block
      loop
        block
          local.get 1
          local.get 0
          i32.const -8
          i32.add
          call $fd_prestat_get
          local.set 2
          local.get 2
          i32.const 0
          i32.ne
          if
            local.get 1
            br 4
          end
        end
        local.get 1
        i32.const 1
        i32.add
        local.set 1
        br 0
      end
    end
    unreachable
  end
  local.get 0
  global.set 0
)
(func $_start (;6;) (type 0)
  (local i32 i32 i32 i32 i32)
  global.get 0
  local.set 3
  local.get 3
  i32.const 8
  i32.sub
  global.set 0
  block
    local.get 3
    i32.const -8
    i32.add
    local.get 3
    i32.const -4
    i32.add
    call $args_sizes_get
    local.set 1
    local.get 1
    i32.eqz
    if
      global.get 0
      i32.const 4
      local.get 3
      i32.const -8
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.mul
      local.get 3
      i32.const -4
      i32.add
      i32.load
      i32.add
      i32.const 7
      i32.add
      i32.const -8
      i32.and
      i32.sub
      global.set 0
      global.get 0
      local.set 0
      local.get 0
      i32.const 4
      local.get 3
      i32.const -8
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.mul
      i32.const 1
      i32.mul
      i32.add
      local.set 4
      local.get 0
      local.get 4
      call $args_get
      drop
    else
      local.get 3
      i32.const -8
      i32.add
      i32.const 1
      i32.store
      global.get 0
      i32.const 4
      local.get 3
      i32.const -8
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.mul
      i32.const 7
      i32.add
      i32.const -8
      i32.and
      i32.sub
      global.set 0
      global.get 0
      local.set 0
      local.get 0
      i32.const 0
      i32.add
      i32.const 8193
      i32.store
    end
    local.get 0
    local.get 3
    i32.const -8
    i32.add
    i32.load
    i32.const 4
    i32.mul
    i32.add
    i32.const 0
    i32.store
    i32.const 8196
    call 5
    i32.store
    call 4
    local.get 3
    i32.const -8
    i32.add
    i32.load
    local.get 0
    call 9
    local.set 2
    local.get 2
    call 10
  end
  local.get 3
  global.set 0
)
(func $fib2 (;7;) (type 1)
  local.get 0
  i32.const 1
  i32.le_s
  if (result i32)
    local.get 0
  else
    local.get 0
    i32.const 1
    i32.sub
    call $fib
    local.get 0
    i32.const 2
    i32.sub
    call $fib
    i32.add
  end
)
(func $fib (;8;) (type 1)
  local.get 0
  i32.const 2
  i32.lt_s
  if (result i32)
    local.get 0
  else
    local.get 0
    i32.const 1
    i32.sub
    call $fib
    local.get 0
    i32.const 2
    i32.sub
    call $fib
    i32.add
  end
)
(func (;9;) (type 2)
  i32.const 0
)
(func (;10;) (type 4)
  (local i32)
  i32.const 8212
  i32.load
  local.set 1
  i32.const 8212
  i32.const 0
  i32.store
  block
    loop
      block
        local.get 1
        i32.const 0
        i32.eq
        br_if 2
        local.get 1
        i32.const 4
        i32.add
        i32.load
        call_indirect (type 0)
      end
      local.get 1
      i32.const 0
      i32.add
      i32.load
      local.set 1
      br 0
    end
  end
  local.get 0
  call $proc_exit
)

;;=== 0x310: DATA, len=17
(data (;0;) (i32.const 8193) "*")
(data (;1;) (i32.const 8196) "\03")
)
exports.fib is: [Function: 8]
exports.fib(20) is: 6765
exports.fib2(20) is: 6765
[Object: null prototype] {
  fib2: [Function: 7],
  fib: [Function: 8],
  _start: [Function: 6],
  memory: Memory [WebAssembly.Memory] {}
}
fib(20) is: 6765
